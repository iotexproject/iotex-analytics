type Query {
    rewards(startEpoch: Int!, epochCount: Int!, candidateName: String!): Reward
    productivity(startEpoch: Int!, epochCount: Int!, producerName: String!): Productivity
    activeAccount(count: Int!):[String!]
    votingInformation(epochNum: Int!, delegateName: String!):[VotingInfo]
    bookkeeping(startEpoch: Int!, epochCount: Int!, delegateName: String!, percentage: Int!, includeFoundationBonus:Boolean!):[RewardDistribution]
    averageProductivity(startEpoch: Int!, epochCount: Int!):String!
    chainMeta(tpsBlockWindow: Int!): ChainMeta
    numberOfActions(startEpoch: Int!, epochCount: Int!):String!
    numberOfWeightedVotes(startEpoch: Int!,epochCount: Int!):[String!]
    numberOfCandidates(epochNumber: Int!): NumberOfCandidates
    totalTokens(startEpoch: Int!,epochCount: Int!):[String!]
    stakeDuration(epochNumber: Int!):[String!]
    numberOfUniqueAccounts(epochNumber: Int!,delegateName: String!): String!
    averageTokenHolding(epochNumber: Int!):String!
    selfStakeAndTotalStake(epochNumber: Int!,delegateName: String!):[String!]
}

type Reward {
    blockReward: String!
    epochReward: String!
    foundationBonus: String!
}

type Productivity {
    production: String!
    expectedProduction: String!
}

type VotingInfo {
    voterAddress: String!
    weightedVotes: String!
}

type RewardDistribution {
    voterAddress: String!
    amount: String!
}

type ChainMeta {
    mostRecentEpoch: String!
    mostRecentBlockHeight: String!
    mostRecentTPS: String!
}

type NumberOfCandidates{
    totalCandidates: Int!
    consensusDelegates: Int!
}