type Query {
    account: Account
    chain: Chain
    delegate(startEpoch: Int!, epochCount: Int!, delegateName: String!): Delegate
    voting(startEpoch: Int!, epochCount: Int!): Voting
    contract(address:String!,numPerPage:Int!,page:Int!):[Contract]
}

type Contract{
    hash:String!
    timestamp:String!
    from:String!
    to:String!
    quantity:String!
}

type Account {
    activeAccounts(count: Int!): [String!]
    alias(operatorAddress: String!): Alias
    operatorAddress(aliasName: String!): OperatorAddress
}

type Delegate {
    reward: Reward
    productivity: Productivity
    bookkeeping(percentage: Int!, includeFoundationBonus: Boolean!): Bookkeeping
    bucketInfo: BucketInfoOutput
    staking: StakingOutput
}

type StakingOutput{
    exist: Boolean!
    stakingInfo: [StakingInformation]!
}

type StakingInformation{
    epochNumber: Int!
    totalStaking: String!
    selfStaking: String!
}

type Voting {
    exist: Boolean!
    candidateMeta: [CandidateMeta]!
}

type Alias {
    exist: Boolean!
    aliasName: String!
}

type OperatorAddress {
    exist: Boolean!
    operatorAddress: String!
}

type Reward {
    exist: Boolean!
    blockReward: String!
    epochReward: String!
    foundationBonus: String!
}

type Productivity {
    exist: Boolean!
    production: String!
    expectedProduction: String!
}

type BucketInfo {
    voterEthAddress: String!
    weightedVotes: String!
}

type Bookkeeping {
    exist: Boolean!
    rewardDistribution(pagination: Pagination): [RewardDistribution]!
    count: Int!
}

type BucketInfoOutput {
    exist: Boolean!
    bucketInfoList: [BucketInfoList]!
}

type BucketInfoList {
    epochNumber: Int!
    bucketInfo: [BucketInfo]!
    count: Int!
}

type RewardDistribution {
    voterEthAddress: String!
    voterIotexAddress: String!
    amount: String!
}

type Chain {
    mostRecentEpoch: Int!
    mostRecentBlockHeight: Int!
    mostRecentTPS(blockWindow: Int!): Int!
    numberOfActions(pagination: EpochRange): NumberOfActions
}

type NumberOfActions{
    exist: Boolean!
    count: Int!
}

type CandidateMeta{
    epochNumber: Int!
    totalCandidates: Int!
    consensusDelegates: Int!
    totalWeightedVotes: String!
    votedTokens: String!
}

input Pagination{
    skip: Int!
    first: Int!
}

input EpochRange{
    startEpoch: Int!
    epochCount: Int!
}